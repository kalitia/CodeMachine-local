[
  {
    "agentId": "qa-engineer",
    "content": "asks.json'), tasks);\n+\n+    const retrySpy = vi.fn(async () => {});\n+    const endSpy = vi.fn(async () => {});\n+\n+    const result = await onMasterMindStop(workspace, { onRetry: retrySpy, onEnd: endSpy });\n+\n+    // Summary exists\n+    const summaryPath = path.join(cmRoot, 'project-summary.md');\n+    const summary = await fs.readFile(summaryPath, 'utf8');\n+    expect(summary).toContain('# Project Summary');\n+    expect(summary).toContain('pending=2');\n+\n+    // Retry triggered, End not called\n+    expect(result).toBe('retried');\n+    expect(retrySpy).toHaveBeenCalledTimes(1);\n+    expect(retrySpy.mock.calls[0][0].pendingCount).toBe(2);\n+    expect(endSpy).not.toHaveBeenCalled();\n+  });\n+\n+  it('writes project-summary.md and emits success banner when all tasks complete', async () => {\n+    const tasks = { tasks: [ { id: 'T1', status: 'done' }, { id: 'T2', status: 'done' } ] };\n+    await writeJson(path.join(cmRoot, 'tasks.json'), tasks);\n+\n+    const retrySpy = vi.fn(async () => {});\n+    let captured = '';\n+    const endSpy = vi.fn(async (msg: string) => { captured = msg; });\n+\n+    const result = await onMasterMindStop(workspace, { onRetry: retrySpy, onEnd: endSpy });\n+\n+    const summaryPath = path.join(cmRoot, 'project-summary.md');\n+    const summary = await fs.readFile(summaryPath, 'utf8');\n+    expect(summary).toContain('completed=2');\n+    expect(summary).toContain('All tasks completed. âœ…');\n+\n+    // End path\n+    expect(result).toBe('ended');\n+    expect(retrySpy).not.toHaveBeenCalled();\n+    expect(endSpy).toHaveBeenCalledTimes(1);\n+    expect(captured).toContain('All tasks completed successfully.');\n+\n+    // Banner function works and prints\n+    const logSpy = vi.spyOn(console, 'log').mockImplementation(() => undefined as any);\n+    const banner = emitSuccessBanner('All done!');\n+    expect(banner).toContain('Codemachine Success');\n+    expect(banner).toContain('All done!');\n+    expect(logSpy).toHaveBeenCalled();\n+    logSpy.mockRestore();\n+  });\n+});",
    "timestamp": "2025-09-27T20:02:37.073Z"
  }
  ,
  {
    "agentId": "qa-engineer",
    "content": "Added integration test tests/integration/workflows/recovery.spec.ts to validate runtime recovery agents (summarize, retry, end). Ensures temp workspace, correct summary counts, retry orchestration, and success banner behavior.",
    "timestamp": "2025-09-27T23:13:15.000Z"
  }
  ,
  {
    "agentId": "qa-engineer",
    "content": "T24_TEST: Branding docs present and correct. docs/reference/branding.md exists and contains 'Gemini UI'. .codemachine/plan.md includes a Planning Assets section linking to docs/reference/branding.md. All checks passed.",
    "timestamp": "2025-09-28T04:00:00.000Z"
  }
  ,
  {
    "agentId": "qa-engineer",
    "content": "T25_TEST: Roadmap exists with Phase 1 checklist; .codemachine/plan.md references docs/architecture/implementation-roadmap.md. All checks passed.",
    "timestamp": "2025-09-28T04:30:00.000Z"
  }
  ,
  {
    "agentId": "qa-engineer",
    "content": "T26_TEST: Next Steps checklist exists and includes 'Set up TypeScript project structure'. .codemachine/plan.md references docs/operations/next-steps.md. All checks passed.",
    "timestamp": "2025-09-28T04:45:00.000Z"
  }
]
